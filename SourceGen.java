/*
 * Copyright (C) 2024-2025 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

/**
 * Generates the Source.java class containing the source code of the app.
 */
public final class SourceGen {

  private SourceGen() {}

  public static void main(String[] args) throws IOException {
    final SourceGen gen;
    gen = new SourceGen();
    
    if (args.length == 0) {
      gen.generate();
    } else {
      gen.test();
    }
  }
  
  private void generate() throws IOException {
    Path main;
    main = Path.of("main");

    Path source;
    source = main.resolve("demo", "landing", "app");

    Path targetFile;
    targetFile = main.resolve("demo", "landing", "app", "Source.java");

    try (
        BufferedWriter w = Files.newBufferedWriter(
            targetFile, StandardCharsets.UTF_8,
            StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING
        );
        DirectoryStream<Path> stream = Files.newDirectoryStream(source, "*.java")
    ) {

      SourceWriter writer;
      writer = new SourceWriter(w);

      writer.writeStart();

      for (Path path : stream) {
        Path fn;
        fn = path.getFileName();

        String fileName;
        fileName = fn.toString();

        if (fileName.equals("Source.java")) {
          continue;
        }

        System.out.println("Info: " + path);

        String java;
        java = Files.readString(path, StandardCharsets.UTF_8);

        writer.writeSource(fileName, java);
      }

      writer.writeEnd();

    }
  }
  
  private void test() throws IOException {
    final StringWriter out;
    out = new StringWriter();
    
    final BufferedWriter w;
    w = new BufferedWriter(out);
    
    final SourceWriter writer;
    writer = new SourceWriter(w);

    final Path path;
    path = Path.of("SourceGen.test");

    final String java;
    java = Files.readString(path, StandardCharsets.UTF_8);

    writer.writeJava(java);
    
    w.flush();
    
    System.out.println(out);
  }

  private static final class SourceWriter {

    private final BufferedWriter w;

    public SourceWriter(BufferedWriter w) {
      this.w = w;
    }

    final void writeStart() throws IOException {
      w.write("""
      /*
       * Copyright (C) 2024-2025 Objectos Software LTDA.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      package demo.landing.app;

      /*
       * Do not edit: this class was generated by SourceGen.java.
       */
      final class Source {
      """);
    }

    final void writeSource(String fileName, String java) throws IOException {
      final int dot;
      dot = fileName.indexOf('.');

      final String className;
      className = fileName.substring(0, dot);

      w.newLine();

      w.write("  static final SourceModel ");

      w.write(className.equals("SourceModel") ? "SourceModel_" : className);

      w.write(" = SourceModel.create(\"");

      w.write(fileName);

      w.write("\", \"\"\"");

      w.newLine();

      writeJava(java);

      w.newLine();

      w.write("\"\"\");");

      w.newLine();
    }
    
    final void writeJava(String java) throws IOException {
      enum Parser {
        NORMAL,

        QUOTE1,
        QUOTE2,

        CHAR1,

        STRING;
      }

      Parser parser;
      parser = Parser.NORMAL;

      for (int idx = 0, len = java.length(); idx < len; idx++) {
        final char c;
        c = java.charAt(idx);

        switch (parser) {
          case NORMAL -> {
            if (c == '"') {
              parser = Parser.QUOTE1;
            }

            else if (c == '\'') {
              parser = Parser.CHAR1;

              w.write(c);
            }

            else {
              parser = Parser.NORMAL;

              w.write(c);
            }
          }

          case QUOTE1 -> {
            if (c == '"') {
              parser = Parser.QUOTE2;
            }

            else {
              parser = Parser.STRING;

              idx--;

              w.write('\"');
            }
          }

          case QUOTE2 -> {
            if (c == '"') {
              parser = Parser.NORMAL;

              w.write("\\\"\"\"");
            }

            else {
              parser = Parser.NORMAL;

              w.write('\"');

              w.write('\"');

              w.write(c);
            }
          }
          
          case CHAR1 -> {
            if (c == '\\') {
              parser = Parser.NORMAL;

              w.write('\\');

              w.write('\\');
            }

            else {
              parser = Parser.NORMAL;

              w.write(c);
            }
          }

          case STRING -> {
            if (c == '"') {
              parser = Parser.NORMAL;

              w.write(c);
            }

            else if (c == '\\') {
              parser = Parser.STRING;

              w.write('\\');

              w.write('\\');
            }

            else {
              parser = Parser.STRING;

              w.write(c);
            }
          }
        }
      }

      if (parser != Parser.NORMAL) {
        throw new IllegalStateException("parser=" + parser);
      }
    }

    final void writeEnd() throws IOException {
      w.write("""
      }
      """);
    }

  }

}