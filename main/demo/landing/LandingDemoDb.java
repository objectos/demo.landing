/*
 * Copyright (C) 2024-2025 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package demo.landing;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.function.IntFunction;
import objectos.way.Media;
import objectos.way.Sql;
import objectos.way.Web;
import org.h2.tools.SimpleResultSet;

/**
 * Bootstraps the application database.
 */
public final class LandingDemoDb {

  private LandingDemoDb() {}

  public static void migration01(Sql.Migrations migrations) {
    migrations.apply("CINEMA schema v1", """
    drop schema if exists CINEMA;
    create schema CINEMA;
    set schema CINEMA;
    set referential_integrity FALSE;

    create table GENRE (
      GENRE_ID tinyint not null generated by default as identity,
      NAME varchar(32) not null,

      primary key (GENRE_ID),
      unique (NAME)
    );

    create table MOVIE (
      MOVIE_ID smallint not null generated by default as identity,
      TITLE varchar(64) not null,
      SYNOPSYS varchar(320) not null,
      RUNTIME smallint not null,
      RELEASE_DATE date not null,

      primary key (MOVIE_ID)
    );

    create table MOVIE_GENRE (
      MOVIE_ID smallint not null,
      GENRE_ID tinyint not null,

      primary key (MOVIE_ID, GENRE_ID),
      foreign key (MOVIE_ID) references MOVIE (MOVIE_ID) on delete restrict on update restrict,
      foreign key (GENRE_ID) references GENRE (GENRE_ID) on delete restrict on update restrict
    );

    create table MOVIE_POSTER (
      MOVIE_ID smallint not null,
      DATA blob(150k) not null,

      primary key (MOVIE_ID),
      foreign key (MOVIE_ID) references MOVIE (MOVIE_ID) on delete restrict on update restrict
    );

    create table SCREEN (
      SCREEN_ID smallint not null generated by default as identity,
      NAME varchar(100) not null,
      SEATING_CAPACITY smallint not null,

      primary key(SCREEN_ID)
    );

    create table SCREENING (
      SCREENING_ID smallint not null generated by default as identity,
      MOVIE_ID smallint not null,
      SCREEN_ID smallint not null,

      primary key (SCREENING_ID),
      foreign key (MOVIE_ID) references MOVIE (MOVIE_ID) on delete restrict on update restrict,
      foreign key (SCREEN_ID) references SCREEN (SCREEN_ID) on delete restrict on update restrict
    );

    create table FEATURE (
      FEATURE_ID smallint not null generated by default as identity,
      NAME varchar(64) not null,

      primary key(FEATURE_ID)
    );

    create table SCREENING_FEATURE (
      SCREENING_ID smallint not null,
      FEATURE_ID smallint not null,

      primary key (SCREENING_ID, FEATURE_ID),
      foreign key (SCREENING_ID) references SCREENING (SCREENING_ID) on delete restrict on update restrict,
      foreign key (FEATURE_ID) references FEATURE (FEATURE_ID) on delete restrict on update restrict
    );

    create table SCREENING_TIME (
      SCREENING_ID smallint not null,
      SCREENING_TIME time not null,
      SEAT_PRICE double not null,

      primary key (SCREENING_ID, SCREENING_TIME),
      foreign key (SCREENING_ID) references SCREENING (SCREENING_ID) on delete restrict on update restrict
    );

    create table SHOW (
      SHOW_ID int not null generated by default as identity,
      SCREENING_ID smallint not null,
      SHOWDATE date not null,
      SHOWTIME time not null,
      SEAT_PRICE double not null,

      primary key (SHOW_ID),
      unique (SCREENING_ID, SHOWDATE, SHOWTIME),
      foreign key (SCREENING_ID) references SCREENING (SCREENING_ID) on delete restrict on update restrict
    );

    create table RESERVATION (
      RESERVATION_ID bigint not null,
      SHOW_ID int not null,
      RESERVATION_TIME timestamp not null default now(),
      TICKET_TIME timestamp null default null,

      primary key (RESERVATION_ID),
      foreign key (SHOW_ID) references SHOW (SHOW_ID) on delete restrict on update restrict
    );

    create index RESERVATION_RESERVATION_TIME on RESERVATION (RESERVATION_TIME, TICKET_TIME);
    create index RESERVATION_TICKET_TIME on RESERVATION (TICKET_TIME);

    create table SEAT (
      SEAT_ID smallint not null generated by default as identity,
      SCREEN_ID smallint not null,
      GRID_Y smallint not null,
      GRID_X smallint not null,
      SEAT_ROW char(1) not null,
      SEAT_COL smallint not null,

      primary key (SEAT_ID),
      unique (SEAT_ID, SCREEN_ID),
      unique (SCREEN_ID, GRID_Y, GRID_X),
      check (0 <= GRID_Y and GRID_Y < 10),
      check (0 <= GRID_X and GRID_X < 10),
      foreign key (SCREEN_ID) references SCREEN (SCREEN_ID) on delete restrict on update restrict
    );

    create table TMP_SELECTION (
      RESERVATION_ID bigint not null,
      SEAT_ID smallint not null,
      SCREEN_ID smallint not null,

      primary key (RESERVATION_ID, SEAT_ID),
      foreign key (RESERVATION_ID) references RESERVATION (RESERVATION_ID) on delete cascade on update restrict,
      foreign key (SEAT_ID, SCREEN_ID) references SEAT (SEAT_ID, SCREEN_ID) on delete restrict on update restrict
    );

    create table SELECTION (
      RESERVATION_ID bigint not null,
      SEAT_ID smallint not null,
      SHOW_ID int not null,

      primary key (RESERVATION_ID, SEAT_ID),
      unique (SEAT_ID, SHOW_ID),
      foreign key (RESERVATION_ID) references RESERVATION (RESERVATION_ID) on delete cascade on update restrict
    );

    create table LOCAL_LOG (
      LOCAL_ID smallint not null,
      LOCAL_TIME timestamp not null default now(),

      primary key (LOCAL_ID, LOCAL_TIME)
    );

    set referential_integrity TRUE;
    """);
  }

  public static void migration02(Sql.Migrations migrations) {
    migrations.apply("CINEMA data v1", """
    set schema CINEMA;

    insert into GENRE (GENRE_ID, NAME)
    values (1, 'Action')
    ,      (2, 'Adventure')
    ,      (3, 'Comedy')
    ,      (4, 'Drama')
    ,      (5, 'Fantasy')
    ,      (6, 'Romance')
    ,      (7, 'Science Fiction')
    ,      (8, 'Thriller')
    ;

    -- Thanks Claude AI
    insert into MOVIE (MOVIE_ID, TITLE, SYNOPSYS, RUNTIME, RELEASE_DATE)
    values (1, 'Digital Dreams', 'A brilliant programmer creates an AI that becomes self-aware, leading to an ethical dilemma that challenges the boundaries of consciousness.', 158, '2024-12-20')
    ,      (2, 'Comedy of Errors 2.0', 'A case of mistaken identity in the age of social media leads to hilarious consequences for two identical strangers.', 93, '2024-12-28')
    ,      (3, 'Beyond the Forest', 'In a magical realm, three siblings must work together to break an ancient curse that has plagued their family for generations.', 125, '2024-12-07')
    ,      (4, 'Speed of Light', 'A street racer gets caught up in a high-stakes heist that puts both her driving skills and loyalty to the ultimate test.', 134, '2024-12-08')
    ;

    create alias CREATE_POSTER for 'demo.landing.LandingDemoDb.createPoster';

    insert into MOVIE_POSTER
    select * from CREATE_POSTER();

    drop alias CREATE_POSTER;

    insert into MOVIE_GENRE (MOVIE_ID, GENRE_ID)
    values (1, 7) -- Science Fiction
    ,      (1, 4) -- Drama
    ,      (1, 8) -- Thriller

    ,      (2, 3) -- Comedy

    ,      (3, 5) -- Fantasy
    ,      (3, 2) -- Adventure
    ,      (3, 4) -- Drama

    ,      (4, 1) -- Action
    ,      (4, 8) -- Thriller
    ;

    insert into SCREEN (SCREEN_ID, NAME, SEATING_CAPACITY)
    values (1, 'JMAX', 45)
    ,      (2, 'Screen 1', 40)
    ,      (3, 'Screen 2', 40)
    ,      (4, 'Screen 3', 30)
    ,      (5, 'Screen 4', 30)
    ;

    insert into SCREENING (SCREENING_ID, MOVIE_ID, SCREEN_ID)
    values (1, 1, 1) -- Digital Dreams (2h 38m)
    ,      (2, 1, 2) -- Digital Dreams (2h 38m)
    ,      (3, 2, 3) -- Comedy of Errors (1h 33m)
    ,      (4, 3, 4) -- Beyond the Forest (2h 05m)
    ,      (5, 4, 1) -- Speed of Light (2h 14m)
    ,      (6, 4, 5) -- Speed of Light (2h 14m)
    ;

    insert into FEATURE (FEATURE_ID, NAME)
    values (1, 'Closed Caption')
    ,      (2, 'Audio Description')
    ,      (3, 'J-BOX')
    ,      (4, 'Recliner')
    ,      (5, 'JMAX')
    ;

    insert into SCREENING_FEATURE (SCREENING_ID, FEATURE_ID)
    values (1, 5)
    ,      (1, 1)
    ,      (1, 2)
    ,      (1, 4)

    ,      (2, 3)
    ,      (2, 1)
    ,      (2, 2)

    ,      (3, 4)
    ,      (3, 1)
    ,      (3, 2)

    ,      (4, 4)
    ,      (4, 1)
    ,      (4, 2)

    ,      (5, 5)
    ,      (5, 1)
    ,      (5, 2)
    ,      (5, 3)
    ,      (5, 4)

    ,      (6, 1)
    ,      (6, 2)
    ;

    insert into SCREENING_TIME (SCREENING_ID, SCREENING_TIME, SEAT_PRICE)
    values (5, '13:00:00', 9.99)
    ,      (1, '16:00:00', 14.99)
    ,      (1, '20:00:00', 19.99)

    ,      (2, '13:00:00', 9.99)
    ,      (2, '16:00:00', 14.99)
    ,      (2, '19:00:00', 19.99)
    ,      (2, '22:00:00', 19.99)

    ,      (3, '14:00:00', 9.99)
    ,      (3, '16:00:00', 14.99)
    ,      (3, '19:00:00', 19.99)
    ,      (3, '21:00:00', 19.99)

    ,      (4, '13:30:00', 9.99)
    ,      (4, '16:00:00', 14.99)
    ,      (4, '18:30:00', 19.99)
    ,      (4, '21:00:00', 19.99)

    ,      (6, '13:00:00', 9.99)
    ,      (6, '15:45:00', 14.99)
    ,      (6, '18:30:00', 19.99)
    ,      (6, '21:15:00', 19.99)
    ;

    insert into SHOW (SCREENING_ID, SHOWDATE, SHOWTIME, SEAT_PRICE)
    select SCREENING_TIME.SCREENING_ID
         , DATES.SHOW_DATE
         , SCREENING_TIME.SCREENING_TIME
         , SCREENING_TIME.SEAT_PRICE

      from SCREENING_TIME
     cross join (select dateadd(day, x, current_date) as SHOW_DATE from system_range(0, 2)) DATES

     order by 1, 2, 3;

    create alias CREATE_SEAT_ROW for 'demo.landing.LandingDemoDb.createSeatRow';

    insert into SEAT (SCREEN_ID, SEAT_ROW, SEAT_COL, GRID_Y, GRID_X)
    select * from CREATE_SEAT_ROW(1, 'A', 0, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(1, 'B', 1, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(1, '-', 2, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(1, 'C', 3, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(1, 'D', 4, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(1, 'E', 5, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(1, 'F', 6, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(1, '-', 7, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(1, 'G', 8, array[0,0,1,1,1,1,1,1,0,0]) union all
    select * from CREATE_SEAT_ROW(1, 'H', 9, array[0,0,1,1,1,1,1,1,0,0]);

    insert into SEAT (SCREEN_ID, SEAT_ROW, SEAT_COL, GRID_Y, GRID_X)
    select * from CREATE_SEAT_ROW(2, 'A', 0, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(2, 'B', 1, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(2, '-', 2, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(2, 'C', 3, array[0,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(2, 'D', 4, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(2, 'E', 5, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(2, 'F', 6, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(2, '-', 7, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(2, 'G', 8, array[0,0,1,1,1,1,1,1,0,0]) union all
    select * from CREATE_SEAT_ROW(2, 'H', 9, array[0,0,1,1,1,1,1,1,0,0]);

    insert into SEAT (SCREEN_ID, SEAT_ROW, SEAT_COL, GRID_Y, GRID_X)
    select * from CREATE_SEAT_ROW(3, 'A', 0, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(3, 'B', 1, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(3, '-', 2, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(3, 'C', 3, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(3, 'D', 4, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(3, 'E', 5, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(3, 'F', 6, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(3, '-', 7, array[0,0,0,0,0,0,0,0,0,1]) union all
    select * from CREATE_SEAT_ROW(3, 'G', 8, array[0,0,1,1,1,1,1,1,0,0]) union all
    select * from CREATE_SEAT_ROW(3, 'H', 9, array[0,0,1,1,1,1,1,1,0,0]);

    insert into SEAT (SCREEN_ID, SEAT_ROW, SEAT_COL, GRID_Y, GRID_X)
    select * from CREATE_SEAT_ROW(4, 'A', 0, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(4, 'B', 1, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(4, '-', 2, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(4, 'C', 3, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(4, 'D', 4, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(4, 'E', 5, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(4, 'F', 6, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(4, '-', 7, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(4, 'G', 8, array[0,0,1,1,1,1,1,1,0,0]) union all
    select * from CREATE_SEAT_ROW(4, 'H', 9, array[0,0,1,1,1,1,1,1,0,1]);

    insert into SEAT (SCREEN_ID, SEAT_ROW, SEAT_COL, GRID_Y, GRID_X)
    select * from CREATE_SEAT_ROW(5, 'A', 0, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(5, 'B', 1, array[1,1,1,1,1,1,1,1,1,1]) union all
    select * from CREATE_SEAT_ROW(5, '-', 2, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(5, 'C', 3, array[0,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(5, 'D', 4, array[1,1,1,1,1,1,1,1,1,0]) union all
    select * from CREATE_SEAT_ROW(5, 'E', 5, array[1,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(5, 'F', 6, array[0,1,1,0,1,1,0,1,1,0]) union all
    select * from CREATE_SEAT_ROW(5, '-', 7, array[0,0,0,0,0,0,0,0,0,0]) union all
    select * from CREATE_SEAT_ROW(5, 'G', 8, array[0,0,1,1,1,1,1,1,0,0]) union all
    select * from CREATE_SEAT_ROW(5, 'H', 9, array[0,0,1,1,1,1,1,1,0,0]);

    drop alias CREATE_SEAT_ROW;
    """);
  }

  public static ResultSet createSeatRow(Connection conn, int screenId, String row, int gridY, Boolean[] columns) throws SQLException {
    final SimpleResultSet rs;
    rs = new SimpleResultSet();

    rs.addColumn("SCREEN_ID", Types.SMALLINT, 5, 0);
    rs.addColumn("SEAT_ROW", Types.CHAR, 1, 0);
    rs.addColumn("SEAT_COL", Types.SMALLINT, 5, 0);
    rs.addColumn("GRID_Y", Types.SMALLINT, 5, 0);
    rs.addColumn("GRID_X", Types.SMALLINT, 5, 0);

    final DatabaseMetaData metaData;
    metaData = conn.getMetaData();

    final String url;
    url = metaData.getURL();

    if (url.equals("jdbc:columnlist:connection")) {
      return rs;
    }

    if ("-".equals(row)) {
      return rs;
    }

    int col;
    col = 1;

    for (int gridX = 0, len = columns.length; gridX < len; gridX++) {
      final Boolean create;
      create = columns[gridX];

      if (create.booleanValue()) {
        rs.addRow(screenId, row, col++, gridY, gridX);
      }
    }

    return rs;
  }

  public static ResultSet createPoster(Connection conn) throws SQLException {
    final SimpleResultSet rs;
    rs = new SimpleResultSet();

    rs.addColumn("MOVIE_ID", Types.SMALLINT, 5, 0);
    rs.addColumn("DATA", Types.BLOB, 200_000, 0);

    final DatabaseMetaData metaData;
    metaData = conn.getMetaData();

    final String url;
    url = metaData.getURL();

    if (url.equals("jdbc:columnlist:connection")) {
      return rs;
    }

    final IntFunction<byte[]> loader;
    loader = (id) -> {
      final ByteArrayOutputStream out;
      out = new ByteArrayOutputStream();

      final Class<?> ctx;
      ctx = LandingDemoDb.class;

      try (InputStream in = ctx.getResourceAsStream("poster" + id + ".jpg")) {
        in.transferTo(out);
      } catch (IOException e) {
        throw new UncheckedIOException(e);
      }

      return out.toByteArray();
    };

    rs.addRow(1, loader.apply(1));
    rs.addRow(2, loader.apply(2));
    rs.addRow(3, loader.apply(3));
    rs.addRow(4, loader.apply(4));

    return rs;
  }

  public static void createPosters(Sql.Database db, Web.Resources.Options options) {
    record Poster(int id, byte[] contents) implements Media.Bytes {
      Poster(ResultSet rs, int idx) throws SQLException {
        this(
            rs.getInt(idx++),
            rs.getBytes(idx++)
        );
      }

      public final String path() {
        return "/demo/landing/poster" + id + ".jpg";
      }

      @Override
      public final String contentType() {
        return "image/jpeg";
      }

      @Override
      public final byte[] toByteArray() {
        return contents;
      }
    }

    final Sql.Transaction trx;
    trx = db.beginTransaction(Sql.READ_COMMITED);

    try {
      trx.sql("set schema CINEMA");

      trx.update();

      trx.sql("""
      select
        MOVIE_ID,
        DATA
      from
        MOVIE_POSTER
      """);

      final List<Poster> posters;
      posters = trx.query(Poster::new);

      trx.commit();

      for (Poster poster : posters) {
        options.addMedia(poster.path(), poster);
      }
    } finally {
      trx.close();
    }
  }

}